// Code generated by suricata-gen; DO NOT EDIT.

package travel

import (
	"context"
	"fmt"
	"github.com/ostafen/suricata/runtime"
	"github.com/xeipuuv/gojsonschema"
)

var (
	FlightSchema            = gojsonschema.NewStringLoader(`{"properties":{"cost":{"type":"number"},"id":{"type":"string"},"round_trip":{"type":"boolean"}},"required":["id","cost","round_trip"],"type":"object"}`)
	BookFlightRequestSchema = gojsonschema.NewStringLoader(`{"properties":{"id":{"type":"integer"}},"required":["id"],"type":"object"}`)
	BookHotelRequestSchema  = gojsonschema.NewStringLoader(`{"properties":{"checkin_date":{"type":"string"},"checkout_date":{"type":"string"},"name":{"type":"string"},"rooms":{"type":"integer"}},"required":["name","checkin_date","checkout_date","rooms"],"type":"object"}`)
	FlightReplySchema       = gojsonschema.NewStringLoader(`{"properties":{"flights":{"items":{"properties":{"cost":{"type":"number"},"id":{"type":"string"},"round_trip":{"type":"boolean"}},"required":["id","cost","round_trip"],"type":"object"},"type":"array"}},"required":["flights"],"type":"object"}`)
	BookFlightReplySchema   = gojsonschema.NewStringLoader(`{"properties":{"booked":{"type":"boolean"}},"required":["booked"],"type":"object"}`)
	ItineraryRequestSchema  = gojsonschema.NewStringLoader(`{"properties":{"request":{"type":"string"}},"required":["request"],"type":"object"}`)
	LocationSchema          = gojsonschema.NewStringLoader(`{"properties":{"city":{"type":"string"},"country":{"type":"string"}},"required":["country","city"],"type":"object"}`)
	HotelSchema             = gojsonschema.NewStringLoader(`{"properties":{"name":{"type":"string"}},"required":["name"],"type":"object"}`)
	HotelReplySchema        = gojsonschema.NewStringLoader(`{"properties":{"booked":{"type":"boolean"}},"required":["booked"],"type":"object"}`)
	BookHotelReplySchema    = gojsonschema.NewStringLoader(`{"properties":{"booked":{"type":"boolean"}},"required":["booked"],"type":"object"}`)
	FindHotelReplySchema    = gojsonschema.NewStringLoader(`{"properties":{"hotels":{"items":{"properties":{"name":{"type":"string"}},"required":["name"],"type":"object"},"type":"array"}},"required":["hotels"],"type":"object"}`)
	FlightRequestSchema     = gojsonschema.NewStringLoader(`{"properties":{"date":{"type":"string"},"from":{"properties":{"city":{"type":"string"},"country":{"type":"string"}},"required":["country","city"],"type":"object"},"round_trip":{"type":"boolean"},"to":{"properties":{"city":{"type":"string"},"country":{"type":"string"}},"required":["country","city"],"type":"object"}},"required":["from","to","date","round_trip"],"type":"object"}`)
	HotelRequestSchema      = gojsonschema.NewStringLoader(`{"properties":{"checkin_date":{"type":"string"},"checkout_date":{"type":"string"},"location":{"properties":{"city":{"type":"string"},"country":{"type":"string"}},"required":["country","city"],"type":"object"}},"required":["location","checkin_date","checkout_date"],"type":"object"}`)
	ItineraryReplySchema    = gojsonschema.NewStringLoader(`{"properties":{"end_date":{"type":"string"},"from":{"properties":{"city":{"type":"string"},"country":{"type":"string"}},"required":["country","city"],"type":"object"},"start_date":{"type":"string"},"to":{"properties":{"city":{"type":"string"},"country":{"type":"string"}},"required":["country","city"],"type":"object"}},"required":["from","to","start_date","end_date"],"type":"object"}`)
	FindHotelRequestSchema  = gojsonschema.NewStringLoader(`{"properties":{"checkin_date":{"type":"string"},"checkout_date":{"type":"string"},"location":{"properties":{"city":{"type":"string"},"country":{"type":"string"}},"required":["country","city"],"type":"object"}},"required":["location","checkin_date","checkout_date"],"type":"object"}`)
)

type (
	Location struct {
		Country string `json:"country"`
		City    string `json:"city"`
	}

	Hotel struct {
		Name string `json:"name"`
	}

	FlightReply struct {
		Flights []Flight `json:"flights,omitempty"`
	}

	BookFlightReply struct {
		Booked bool `json:"booked"`
	}

	ItineraryRequest struct {
		Request string `json:"request"`
	}

	HotelReply struct {
		Booked bool `json:"booked"`
	}

	BookHotelReply struct {
		Booked bool `json:"booked"`
	}

	FindHotelReply struct {
		Hotels []Hotel `json:"hotels,omitempty"`
	}

	FindHotelRequest struct {
		Location     Location `json:"location"`
		CheckinDate  string   `json:"checkin_date"`
		CheckoutDate string   `json:"checkout_date"`
	}

	FlightRequest struct {
		From      Location `json:"from"`
		To        Location `json:"to"`
		Date      string   `json:"date"`
		RoundTrip bool     `json:"round_trip"`
	}

	HotelRequest struct {
		Location     Location `json:"location"`
		CheckinDate  string   `json:"checkin_date"`
		CheckoutDate string   `json:"checkout_date"`
	}

	ItineraryReply struct {
		From      Location `json:"from"`
		To        Location `json:"to"`
		StartDate string   `json:"start_date"`
		EndDate   string   `json:"end_date"`
	}

	Flight struct {
		Id        string  `json:"id"`
		Cost      float64 `json:"cost"`
		RoundTrip bool    `json:"round_trip"`
	}

	BookFlightRequest struct {
		Id int `json:"id"`
	}

	BookHotelRequest struct {
		Name         string `json:"name"`
		CheckinDate  string `json:"checkin_date"`
		CheckoutDate string `json:"checkout_date"`
		Rooms        int    `json:"rooms"`
	}
)

type HotelAgentTools interface {
	FindHotels(ctx context.Context, in *FindHotelRequest) (*FindHotelReply, error)
	BookHotel(ctx context.Context, in *BookHotelRequest) (*BookHotelReply, error)
}

var HotelAgentToolsSpec = []runtime.ToolSpec{{Name: "FindHotels", Description: "Find hotels in a city", Schema: FindHotelRequestSchema}, {Name: "BookHotel", Description: "Create an hotel reservation", Schema: BookHotelRequestSchema}}

var HotelAgentInstructions = `You are a hotel planning assistant. Your role is to provide hotel options.
`

type HotelAgent struct {
	runtime *runtime.Runtime
	tools   HotelAgentTools
}

func NewHotelAgent(invoker runtime.Invoker, tools HotelAgentTools) *HotelAgent {
	return &HotelAgent{runtime: runtime.NewRuntime(invoker), tools: tools}
}

func (a *HotelAgent) unmarshaller(method string, data []byte) (any, error) {
	switch method {
	case "FindHotels":
		var payload FindHotelRequest
		err := runtime.UnmarshalValidate(data, &payload, FindHotelRequestSchema)
		return &payload, err
	case "BookHotel":
		var payload BookHotelRequest
		err := runtime.UnmarshalValidate(data, &payload, BookHotelRequestSchema)
		return &payload, err
	}

	return nil, fmt.Errorf("no such tool: \"%s\"", method)
}

func (a *HotelAgent) toolsInvoker(ctx context.Context, name string, in any) (any, error) {
	switch name {
	case "FindHotels":
		return a.tools.FindHotels(ctx, in.(*FindHotelRequest))
	case "BookHotel":
		return a.tools.BookHotel(ctx, in.(*BookHotelRequest))
	}

	return nil, fmt.Errorf("no such tool: \"%s\"", name)
}

func (c *HotelAgent) BookHotel(ctx context.Context, in *HotelRequest) (*HotelReply, error) {
	prompt := ``

	// Invoke LLM runtime
	out := HotelReply{}
	err := c.runtime.Invoke(ctx, runtime.Request{
		SkipInput:        false,
		Instructions:     HotelAgentInstructions,
		PromptTemplate:   prompt,
		Input:            in,
		Output:           &out,
		InputSchema:      HotelRequestSchema,
		OutputSchema:     HotelReplySchema,
		ToolUnmarshaller: c.unmarshaller,
		ToolInvoker:      c.toolsInvoker,
		ToolSpecs:        HotelAgentToolsSpec,
	})
	if err != nil {
		return nil, fmt.Errorf("llm call failed: %w", err)
	}

	return &out, nil
}

var ItineraryAgentInstructions = `You are an itinerary planner. Combine flight and hotel results into a suggested itinerary.
`

type ItineraryAgent struct {
	runtime *runtime.Runtime
}

func NewItineraryAgent(invoker runtime.Invoker) *ItineraryAgent {
	return &ItineraryAgent{runtime: runtime.NewRuntime(invoker)}
}

func (c *ItineraryAgent) ExtractInfo(ctx context.Context, in *ItineraryRequest) (*ItineraryReply, error) {
	prompt := ``

	// Invoke LLM runtime
	out := ItineraryReply{}
	err := c.runtime.Invoke(ctx, runtime.Request{
		SkipInput:      false,
		Instructions:   ItineraryAgentInstructions,
		PromptTemplate: prompt,
		Input:          in,
		Output:         &out,
		InputSchema:    ItineraryRequestSchema,
		OutputSchema:   ItineraryReplySchema,
	})
	if err != nil {
		return nil, fmt.Errorf("llm call failed: %w", err)
	}

	return &out, nil
}

type FlightAgentTools interface {
	FindFlights(ctx context.Context, in *FlightRequest) (*FlightReply, error)
	BookFlight(ctx context.Context, in *BookFlightRequest) (*BookFlightReply, error)
}

var FlightAgentToolsSpec = []runtime.ToolSpec{{Name: "FindFlights", Description: "Find flights between two cities", Schema: FlightRequestSchema}, {Name: "BookFlight", Description: "Book a flight for a given date", Schema: BookFlightRequestSchema}}

var FlightAgentInstructions = `You are a flight planning assistant. Your role is to find the most suitable flight option.
`

type FlightAgent struct {
	runtime *runtime.Runtime
	tools   FlightAgentTools
}

func NewFlightAgent(invoker runtime.Invoker, tools FlightAgentTools) *FlightAgent {
	return &FlightAgent{runtime: runtime.NewRuntime(invoker), tools: tools}
}

func (a *FlightAgent) unmarshaller(method string, data []byte) (any, error) {
	switch method {
	case "FindFlights":
		var payload FlightRequest
		err := runtime.UnmarshalValidate(data, &payload, FlightRequestSchema)
		return &payload, err
	case "BookFlight":
		var payload BookFlightRequest
		err := runtime.UnmarshalValidate(data, &payload, BookFlightRequestSchema)
		return &payload, err
	}

	return nil, fmt.Errorf("no such tool: \"%s\"", method)
}

func (a *FlightAgent) toolsInvoker(ctx context.Context, name string, in any) (any, error) {
	switch name {
	case "FindFlights":
		return a.tools.FindFlights(ctx, in.(*FlightRequest))
	case "BookFlight":
		return a.tools.BookFlight(ctx, in.(*BookFlightRequest))
	}

	return nil, fmt.Errorf("no such tool: \"%s\"", name)
}

func (c *FlightAgent) SearchFlights(ctx context.Context, in *FlightRequest) (*FlightReply, error) {
	prompt := ``

	// Invoke LLM runtime
	out := FlightReply{}
	err := c.runtime.Invoke(ctx, runtime.Request{
		SkipInput:        false,
		Instructions:     FlightAgentInstructions,
		PromptTemplate:   prompt,
		Input:            in,
		Output:           &out,
		InputSchema:      FlightRequestSchema,
		OutputSchema:     FlightReplySchema,
		ToolUnmarshaller: c.unmarshaller,
		ToolInvoker:      c.toolsInvoker,
		ToolSpecs:        FlightAgentToolsSpec,
	})
	if err != nil {
		return nil, fmt.Errorf("llm call failed: %w", err)
	}

	return &out, nil
}
